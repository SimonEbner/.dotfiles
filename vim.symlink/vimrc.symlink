" Run git clone https://github.com/VundleVim/Vundle.vim.git
" ~/.vim/bundle/Vundle.vim
set nocompatible              " be iMproved, required
filetype off                  " required
:syntax on
:set fileformat=unix
:call pathogen#infect()
:call pathogen#runtime_append_all_bundles()
:call pathogen#helptags()
:filetype plugin indent on
:set autoindent
:set pastetoggle=<F10>
:set showmatch
:set ignorecase
:set smartcase
:set matchtime=0
:set hlsearch
:set incsearch
:nnoremap <C-j> :tabn<CR>
:nnoremap <C-k> :tabp<CR>
:inoremap <C-j> <C-o>:tabn<CR>
:inoremap <C-k> <C-o>:tabp<CR>
:inoremap <C-z> <C-o><C-z>
:nnoremap x "_x
:nnoremap dx "_dd

:set tabstop=4
:set shiftwidth=4
:set expandtab
:set backup
:set backupdir=~/.vim/backup,~/vimfiles/backup
:set directory=~/.vim/tmp,~/vimfiles/tmp
:set smarttab
:set bs=2

:set nocindent
:set linebreak
:set showbreak=...

:set encoding=utf-8
:set fileencoding=utf-8
:set autochdir

:set modeline
:set ls=2
if exists('+colorcolumn')
    set colorcolumn=80
else
    highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    match OverLength /\%81v.\+/
endif

"
" Camel Case Movment
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --exclude-standard && git ls-files . --exclude-standard --others', 'find %s -type f']
"let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'


" powerline
set nocompatible
set t_Co=256
"set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim

hi User1 guifg=#eea040 guibg=#222222
hi User2 guifg=#dd3333 guibg=#222222
hi User3 guifg=#ff66ff guibg=#222222
hi User4 guifg=#a0ee40 guibg=#222222
hi User5 guifg=#eeee40 guibg=#222222


" save as admin
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
command Wq :execute ':W' | :q
command WQ :Wq

if has( 'win32' )
    colorscheme default
else
    colorscheme wombat256mod
endif

map <F2> :TlistToggle<CR>

" folding, open all folds
nnoremap <F8> zr
" close all folds
nnoremap <S-F8> zm
" open fold with space
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
inoremap <F8> <C-O>za

" run block when pressing f10
nmap <F12> <C-M-s>
imap <F12> <C-O><C-M-s>

" Switch between splits
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j

let g:ycm_path_to_python_interpreter = '/usr/bin/python'
let g:UltiSnipsExpandTrigger = '<f6>'

" Integrate eclim with ycm
let g:EclimCompletionMethod = 'omnifunc'

" Disable the scratch preview window
set completeopt-=preview

" Close scratch preview after completion box is closed
"let g:SuperTabClosePreviewOnPopupClose = 1
"
inoremap <C-G> <C-O>:JavaImpl<CR><S-G>
nnoremap <C-G> :JavaImpl<CR><S-G>
inoremap <C-F12> <C-O>:ProjectProblems!<CR><S-G>
nnoremap <C-F12> :ProjectProblems!<CR><S-G>
let g:indentLine_color_term=237

"inverse tab
imap <C-U> <Esc>xxxi

hi ColorColumn ctermbg=0
hi ColorColumn ctermfg=7
cabbrev E Explore
let g:tex_conceal = ""

" https://superuser.com/questions/302186/vim-scrolls-very-slow-when-a-line-is-too-long
" stop highlighting after 128 characters (massive performance improv)
set synmaxcol=128
set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'

hi SpellBad term=reverse ctermfg=white ctermbg=darkred guifg=#ffffff guibg=#7f0000 gui=underline
hi SpellCap guifg=#ffffff guibg=#7f007f
hi SpellRare guifg=#ffffff guibg=#00007f gui=underline
hi SpellLocal term=reverse ctermfg=black ctermbg=darkgreen guifg=#ffffff guibg=#7f0000 gui=underline

function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

setlocal linebreak
setlocal nolist
setlocal display+=lastline

" Pep 8 check on py file save
autocmd BufWritePost *.py call Flake8()
set splitright

" Tagbar
nnoremap <silent> <Leader>b :TagbarToggle<CR>
set tags=tags;

" Clang-Format
map <C-L> :py3f ~/dev/llvm/tools/clang/tools/clang-format/clang-format.py<cr>
imap <C-L> <c-o>:py3f ~/dev/llvm/tools/clang/tools/clang-format/clang-format.py<cr>
function! Formatonsave()
  let l:formatdiff = 1
  py3f ~/dev/llvm/tools/clang/tools/clang-format/clang-format.py
endfunction
autocmd BufWritePre *.h,*.cc,*.cpp call Formatonsave()



" Build
" Set the variable @c like so: 
" let @c="./tests --gtest_filter='*sqlite*'
function MyVimuxCmd()
    execute ':call VimuxRunCommand("' . @c . '")'
endfunction
nnoremap <C-n><C-n> :call VimuxSendKeys("C-c") \| call VimuxRunCommand("make -j12 tests")<CR>
inoremap <C-n><C-n> <C-O>:call VimuxSendKeys("C-c") \| call VimuxRunCommand("make -j12 tests")<CR>
nnoremap <C-n><C-m> :call MyVimuxCmd()<CR>

" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'bogado/file-line'
Plugin 'majutsushi/tagbar'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'bkad/CamelCaseMotion.git'
Plugin 'danro/rename.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdcommenter'
Plugin 'nvie/vim-flake8'
Plugin 'benmills/vimux'
Plugin 'tpope/vim-fugitive'
call vundle#end()            " required
filetype plugin indent on    " required

" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" Use font Meslo LG L DZ for Powerline
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '⮃'"

:set autoread 

